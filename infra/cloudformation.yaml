AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Main stack for the Connected Vehicle Solution.
  This stack creates the core resources for the solution, and establishes the foundations for the system's modularity.
Parameters:
  CoreModules:
    Type: CommaDelimitedList
    Description: List of the modules that are mandatory for the system to work
    AllowedValues:
      - 'auth,fleet,telemetry'
    ConstraintDescription: |
      Currently the Connected Vehicle solution needs to have the auth, telemetry and vehicle modules enabled to work properly.
      You must leave this value as its default
    Default: auth,fleet,telemetry
  InstalledModules:
    Type: CommaDelimitedList
    Description: List of modules included in the current deployment of the solution
    # TODO Fix this.
    # AllowedValues: 
    #   - anomalies
    #   - api
    #   - driver-safety
    #   - dtc
    #   - jitr
    #   - notifications
    #   - poi
    Default: api,driver-safety,dtc
  CoreRepositoryName:
    Type: String
    Description: |
      Name of the repository that contains the source code of the solution you want to deploy.
      This is useful if you've created your own copy of the repository and changed its name.
    Default: aws-connected-vehicle-solution
  CoreRepositoryOwner:
    Type: String
    Description: |
      Owner of the repository that contains the source code of the solution you want to deploy.
      This is useful if you've created your own copy of the repository and changed its name.
    Default: pesama # TODO Change for awslabs when PRing
  RolesPath:
    Type: String
    Description: |
      Path to organize the solution roles into. 
      This is useful if you plan to have multiple times the solution deployed or want to have more hierarchical structure of your IAM roles
    Default: /connected-vehicle/
    AllowedPattern: /(.)+/
    ConstraintDescription: The Path must start and end with a slash
  GithubOAuthToken:
    Type: AWS::SSM::Parameter::Value<String>
    Default: GITHUB_OAUTH_TOKEN
    Description: |
      Github token used to authorize the cicd pipeline to sync with the repository that stores the code.
    NoEcho: Yes
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - 
        Label: Core Modules
        Parameters:
          - CoreModules
      - 
        Label: Additional Modules
        Parameters:
          - IncludedModules
      - 
        Label: Source Configuration
        Parameters:
          - CoreRepositoryName
          - CoreRepositoryBranch
          - CoreRepositoryOwner
          - GithubOAuthToken
      - 
        Label: Advanced
        Parameters:
          - RolesPath
    ParameterLabels: 
      CoreModules: Mandatory modules (do not modify this)
      CoreRepositoryName: Core repository name
      CoreRepositoryBranch: Core repository branch
      CoreRepositoryOwner: Core repository owner
      GithubOAuthToken: Github OAuth token
      IncludedModules: Additional modules for your deployment
      RolesPath: Path for the IAM roles
Resources:
  LoggingStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Tags:
        - 
          Key: Component
          Value: !Ref AWS::StackName
        - 
          Key: Module
          Value: core
        - 
          Key: Role
          Value: logging
      TemplateURL: ./logging.yaml
  CICDPipeline:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        CoreModules: 
          Fn::Join: [',', !Ref CoreModules]
        CoreStackName: !Ref AWS::StackName
        InstalledModules: 
          Fn::Join: [',', !Ref InstalledModules]
        LoggingBucket: !GetAtt LoggingStack.Outputs.LoggingBucketName
        OAuthToken: !Ref GithubOAuthToken
        RepositoryName: !Ref CoreRepositoryName
        RepositoryOwner: !Ref CoreRepositoryOwner
      Tags: 
        - 
          Key: Component
          Value: !Ref AWS::StackName
        - 
          Key: Module
          Value: core
        - 
          Key: Role
          Value: cicd
      TemplateURL: ./cicd.yaml
Outputs:
  DeploymentName:
    Description: How the deployed solution is named on your account
    Value: !Ref AWS::StackName
    Export:
      Name: connected-vehicle-deployment-name
  RolesPath:
    Description: Path to use for the roles of the system
    Value: !Ref RolesPath
    Export:
      Name: connected-vehicle-roles-path
  CoreModules:
    Description: List of core modules for this deployment
    Value: 
      Fn::Join:
        - ','
        - !Ref CoreModules
    Export:
      Name: connected-vehicle-core-modules
  InstalledModules:
    Description: List of installed modules for this deployment
    Value: 
      Fn::Join:
        - ','
        - !Ref InstalledModules
    Export:
      Name: connected-vehicle-installed-modules
  CICDArtifactsBucket:
    Description: Name of the artifacts bucket for cicd
    Value: !GetAtt CICDPipeline.Outputs.ArtifactsBucketName
    Export:
      Name: connected-vehicle-cicd-artifacts-bucket
  CodeRepositoryOwner:
    Description: Owner of the repository that stores the code of this solution
    Value: !Ref RepositoryOwner
    Export:
      Name: connected-vehicle-source-repository-owner
  CodeRepositoryName:
    Description: Name of the repository that stores the code of this solution
    Value: !Ref RepositoryName
    Export:
      Name: connected-vehicle-source-repository-name